#!/usr/bin/env python

"""Find image files by attributes like dimension and aspect ratio.

Examples of usage:

    To find all images under the current directory with a 4:3 aspect ratio:
        igrep -r -a 4:3 .

    To find all images that are at least 1600 pixels wide:
        igrep -r -W ge:1600 .

    Options can be combined:
        igrep -r -a 4:3 -W ge:1600 .

"""

import os, operator
from decimal import Decimal
from argparse import ArgumentParser
from PIL import Image


def same_aspect_ratio(size1, size2):
	return aspect_ratio(size1) == aspect_ratio(size2)


def aspect_ratio(size):
	return Decimal('%.2f' % (float(size[0]) / size[1]))


def is_size_match(size, query):
	"""
	Determine if the image size passed matches the size query.
	The size is a tuple of (width, height).
	The query is similar to size, but width or height could be None.
	Examples for query:
	    (None, '1080')    is height equal to 1080 pixels?
	    ('gt:100', None)  is width greater than 100 pixels?
	    ('800', '600')    is image equal to 800x600 pixels?
	"""

	def split(s):
		if ':' in s:
			op, val = s.split(':')
		else:
			op, val = 'eq', s
		return op.lower(), int(val)

	def comp(s, q):
		op, val = split(q)
		return {
			'eq': s == val,
			'ne': s != val,
			'lt': s < val,
			'le': s <= val,
			'gt': s > val,
			'ge': s >= val,
		}[op]

	for (s, q) in zip(size, query):
		if None in (s, q):
			continue
		if not comp(s, q):
			return False

	return True


def get_images(paths, recursive=False):
	for f in get_files(paths, recursive):
		try:
			yield Image.open(f)
		except (IOError, ValueError):
			pass


def get_files(paths, recursive=False):
	for path in paths:
		if os.path.isdir(path):
			if not recursive:
				continue
			for root, dirs, files in os.walk(path):
				for f in files:
					yield os.path.join(root, f)
		elif os.path.isfile(path):
			yield path


def image_info(image):
	columns = [
		image.filename, image.format, image.mode,
		'%sx%s' % image.size, operator.mul(*image.size)
	]
	return '\t'.join(str(c) for c in columns)


def get_arguments():
	a = ArgumentParser(description="Find image files by attributes.")
	a.add_argument('paths', metavar='PATH', nargs='+', help="path to search for images")
	a.add_argument('-r', '--recursive', action='store_true', help='recurse into directories')
	a.add_argument('-a', '--aspect', help='search by aspect ratio (ex: 4:3)')
	a.add_argument('-v', '--invert-match', action='store_true', help='invert the search logic')
	a.add_argument('-W', '--width', help='specify width')
	a.add_argument('-H', '--height', help='specify height')
	a.add_argument('-I', '--info', action='store_true', help='display image information')
	return a.parse_args()


def main():
	args = get_arguments()
	images = get_images(args.paths, args.recursive)
	comp = operator.not_ if args.invert_match else operator.truth
	if args.aspect:
		sa = [float(x) for x in args.aspect.split(':')]
		images = (
			i for i in images
			if comp(same_aspect_ratio(i.size, sa))
		)
	if args.width or args.height:
		s = (args.width, args.height)
		images = (
			i for i in images
			if comp(is_size_match(i.size, s))
		)
	if args.info:
		for i in images:
			print(image_info(i))
	else:
		for i in images:
			print(i.filename)


if __name__ == '__main__':
	main()
