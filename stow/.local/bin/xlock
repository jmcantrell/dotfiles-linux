#!/usr/bin/env bash

# Wrapper for i3lock to create a lock image and delay notifications.

set -euo pipefail

dunst_paused=$(dunstctl is-paused)

dunstctl set-paused true

image=$(mktemp --suffix=.png)
trap 'rm -f "$image"' INT TERM EXIT

import -window root "$image"             # get desktop image
mogrify -blur '0x6' "$image"             # blur
mogrify -scale 10% -scale 1000% "$image" # pixelate

# When using xss-lock to run this locker during a system suspend, the system
# usually goes to sleep before the locker has a chance to run. When the system
# resumes, there's a short period of time between when the system wakes up and
# when the locker runs where the display is unlocked.
#
# The solution requires xss-lock to use the --transfer-sleep-lock option, which
# adds an environment variable, XSS_SLEEP_LOCK_FD. This stores a file descriptor
# number which, when closed, allows the suspend to continue.

locker=(i3lock -nft -p default -i "$image")
trap 'pkill -x -P $$ ${locker[0]}' INT TERM

# This branch only occurs when using xss-lock and only during suspend.
if [[ -v XSS_SLEEP_LOCK_FD && -e /dev/fd/$XSS_SLEEP_LOCK_FD ]]; then
    "${locker[@]}" "$@" {XSS_SLEEP_LOCK_FD}<&- & # background locker process
    exec {XSS_SLEEP_LOCK_FD}<&-                  # continue suspend
    wait -f                                      # wait for locker to close
else
    "${locker[@]}" "$@"
fi

dunstctl set-paused "$dunst_paused"
