#!/usr/bin/env bash

set -e

count=1
delay=0
device=/dev/video0

me=${0##*/}
usage="Capture images from the camera.

Usage: $me [-h] [-i DEVICE] [-n NUMBER] [-d NUMBER] FILENAME

Options:
    -h           show this help message
    -i DEVICE    capture from DEVICE (default: $device)
    -n NUMBER    capture NUMBER images (default: $count)
    -d NUMBER    delay each capture by NUMBER seconds (default: $delay)

Arguments:
    FILENAME     output capture to FILENAME

Examples:
    $me selfie.png
        Capture a single image from the default camera.

    $me -n5 -d3 photo-booth-%s-\\\$n.png
        Capture five images with a three second countdown on each.

The output filename can include any format sequence accepted by date(1).
Additionally, if capturing multiple images, \$n will be replaced with the image number.
Format sequences like \$n may need to be escaped to prevent the shell from seeing it.
"

usage() {
    echo "$usage" >&2
    exit 0
}

die() {
    echo "$me: $*" >&2
    exit 1
}

while getopts ":hi:n:d:" option; do
    case $option in
    h) usage ;;

    i) device=$OPTARG ;;
    n) count=$OPTARG ;;
    d) delay=$OPTARG ;;

    *) die "invalid option '$option'" ;;
    esac
done && shift $((OPTIND - 1))

output=$1

[[ $output ]] || die "missing output file"
((count > 0)) || die "count must be a positive number"
((delay >= 0)) || die "delay must be a non-negative number"

output=$(date +"$output")
output=$(realpath "$output")
mkdir -p "$(dirname "$output")"

options=(-y -f v4l2 -i "$device" -frames:v 1)

declare -a outputs

for n in $(seq -w 1 "$count"); do
    if ((delay > 0)); then
        for ((tick = 1; tick <= delay; tick += 1)); do
            sleep 1
            canberra-gtk-play -i message-new-instant &
        done
    fi

    output_n=${output/\$n/$n}

    ffmpeg "${options[@]}" "$output_n"
    canberra-gtk-play -i camera-shutter &

    outputs+=("$output_n")
done

if ((${#outputs[@]} == 1)); then
    echo -n "${outputs[0]}"
    xsel -ib <<<"${outputs[0]}"
else
    printf "%s\n" "${outputs[@]}"
    printf "%s\n" "${outputs[@]}" | xsel -ib
fi

if ((count > 1)); then
    title="Captured $count Photos"
else
    title="Captured Photo"
fi
notify-send -i media-record "$title" "<u>${output/$HOME/\~}</u>" &

xdg-open "${outputs[@]}" &
