#!/usr/bin/env bash

set -euo pipefail

delay=0
directory=$HOME
file_name=desktop_%FT%T%:z
file_type=mp4

usage="Capture video of the desktop.

Usage:
    ${0##*/} [OPTIONS] [FILE]
    
Options:
    -h              show this help text and exit

    -g GEOMETRY     geometry of region to capture

    -f              capture focused window
    -r              select region to capture
    -s              select window to capture

    -a              also capture audio from microphone

    -d NUMBER       number of seconds to wait before starting capture
                    (default: $delay)

    -D DIRECTORY    directory in which to store default output file
                    (default: $directory)

    -N FILENAME     filename to use for default output file
                    (default: $file_name)

    -E EXTENSION    extension to use for default output file
                    (default: $file_type)

    -X              stop recording video

Arguments:
    FILE            output file (used instead of default)
                    formats any sequences recognized by strftime
                    (default: $directory/$file_name.$file_type)"

window_geometry() {
    swaymsg -t get_tree | jq -r ".. | select(.rect? and .visible?${1:+ and .focused?}) | .rect | \"\(.x),\(.y) \(.width)x\(.height)\""
}

capture_audio=0
capture_command_pid_file=$XDG_RUNTIME_DIR/${0##*/}-command.pid

while getopts ":g:rfsad:D:N:E:Xh" option; do
    case $option in
    g) geometry=$OPTARG ;;
    r) geometry=$(slurp) ;;
    f) geometry=$(window_geometry 1) ;;
    s) geometry=$(window_geometry | slurp -r) ;;
    a) capture_audio=1 ;;
    d) delay=$OPTARG ;;
    D) directory=$OPTARG ;;
    N) file_name=$OPTARG ;;
    E) file_type=$OPTARG ;;
    X)
        if [[ -f $capture_command_pid_file ]]; then
            kill "$(<"$capture_command_pid_file")"
        fi
        exit 0
        ;;
    h)
        printf "%s\n" "$usage"
        exit 0
        ;;
    *)
        printf "Invalid option: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    esac
done && shift $((OPTIND - 1))

output_file=$(date +"${1:-$directory/$file_name.$file_type}")

capture_command=(wf-recorder)

if [[ -v geometry ]]; then
    capture_command+=(-g "$geometry")
fi

if ((capture_audio)); then
    capture_command+=(-a)
fi

if [[ $output_file == *.gif ]]; then
    capture_command+=(-c gif)
fi

# If a delay was requested, provide an audible countdown to let user know
# something is about to happen.
if ((delay > 0)); then
    canberra-gtk-play -l "$delay" -i message
fi

mkdir -p "$(dirname "$output_file")"
capture_command+=(-f "$output_file")

# Normally, the capture command can be stopped with ctrl-c. If not associated
# with a terminal, there will be no way to directly tell the capture command to
# stop. Therefore, record its pid so that it can be killed later.
if ! tty --silent; then
    "${capture_command[@]}" &
    printf "%s\n" "$!" >"$capture_command_pid_file"
    printf -v cleanup "rm %q" "$capture_command_pid_file"
    trap '$cleanup' EXIT
    wait -f
else
    "${capture_command[@]}"
fi

# If the capture file is a gif, optimize it.
if [[ $output_file == *.gif ]] && command -v gifsicle >/dev/null; then
    gifsicle --batch --optimize=3 "$output_file"
fi

# Provide audible feedback that capture is complete.
canberra-gtk-play -i camera-shutter &

wl-copy -n "$output_file"
