#!/usr/bin/env bash

set -euo pipefail

step=5

usage="Set the audio volume and show a notification.

Usage:
    ${0##*/} [OPTIONS] ACTION

Options:
    -h           show this help text and exit

    -o           change volume for outputs (sinks)
                 (the default, if neither -o or -i are used)

    -i           change volume for inputs (sources)

    -n NAME      change volume for input/output NAME
                 (default: @DEFAULT_SINK@ or @DEFAULT_SOURCE@)

    -s NUMBER    increment or decrement by NUMBER percent
                 (default: $step)

Actions:
    up           increase volume
    down         decrease volume
    mute         toggle volume mute status
    max          set volume to maximum
    NUMBER       set volume to NUMBER percent"

type_name=sink

while getopts ":ois:n:h" option; do
    case $option in
    s) step=$OPTARG ;;
    o) type_name=sink ;;
    i) type_name=source ;;
    n) target_name=$OPTARG ;;
    h)
        printf "%s\n" "$usage"
        exit 0
        ;;
    *)
        printf "Invalid option: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    esac
done && shift $((OPTIND - 1))

if [[ ! -v target_name ]]; then
    case $type_name in
    sink) target_name=@DEFAULT_SINK@ ;;
    source) target_name=@DEFAULT_SOURCE@ ;;
    esac
fi

if [[ ! -v 1 ]]; then
    printf "The first argument must be an action\n" >&2
    exit 1
fi

action=$1

case $action in
mute) pactl set-"$type_name"-mute "$target_name" toggle ;;
up) pactl set-"$type_name"-volume "$target_name" +"$step%" ;;
down) pactl set-"$type_name"-volume "$target_name" -"$step%" ;;
max) pactl set-"$type_name"-volume "$target_name" 100% ;;
[0-9]*) pactl set-"$type_name"-volume "$target_name" "$action" ;;
*)
    printf "Invalid action: %s\n" "$action" >&2
    exit 1
    ;;
esac

# If sway is running, refresh the status line to reflect the new volume.
if [[ -v SWAYSOCK ]]; then
    # But send the refresh command no more than once per second.
    throttle swaystatus-refresh 1 killall -SIGUSR1 swaystatus &
fi

read -r left right < <(pactl get-"$type_name"-volume "$target_name" | head -n1 | awk '{print $5,$12}')

# If the left and right channel values are the same, just display one value.
# Otherwise, show separate values for each channel.
if [[ "$left" == "$right" ]]; then
    volume=$left
else
    volume="Left: $left, Right: $right"
fi

# Show a different icon depending on the mute status.
if [[ $(pactl get-"$type_name"-mute "$target_name" | awk '{print $NF}') == yes ]]; then
    case $type_name in
    sink) icon="audio-volume-muted-symbolic" ;;
    source) icon="microphone-disabled-symbolic" ;;
    esac
else
    case $type_name in
    sink) icon="audio-volume-high-symbolic" ;;
    source) icon="microphone-sensitivity-high-symbolic" ;;
    esac
fi

# Provide audible feedback so user is aware of new volume and mute status.
if [[ $type_name == sink ]]; then
    canberra-gtk-play -i message &
fi

notify-send -u low -i "$icon" \
    -h int:value:"$volume" \
    -h string:x-canonical-private-synchronous:"${0##*/}" \
    "Volume Control" "Volume: $volume" &
