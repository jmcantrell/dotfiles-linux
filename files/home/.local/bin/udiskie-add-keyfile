#!/usr/bin/env bash

set -euo pipefail

config_dir=${XDG_CONFIG_HOME:-$HOME/.config}/udiskie
keyfile_dir=${XDG_DATA_HOME:-$HOME/.local/share}/udiskie/keyfiles
config_file=$config_dir/config.json

usage="Remember an encrypted disk's keyfile for automatic mounting.

Usage:
    ${0##*/} [OPTIONS] DEVICE KEYFILE

Options:
    -h              show this help text and exit

    -n NAME         use NAME for the keyfile instead of the UUID

    -C DIRECTORY    udiskie configuration directory
                    (default: ${config_dir/$HOME/\~})

Arguments:
    DEVICE          device to unlock with KEYFILE   
    KEYFILE         file capable of unlocking DEVICE

It's expected that KEYFILE is already (or will be) added to DEVICE."

unset keyfile_name

while getopts ":n:C:h" option; do
    case $option in
    n) keyfile_name=$OPTARG ;;
    C) config_dir=$OPTARG ;;
    h)
        printf "%s\n" "$usage"
        exit 0
        ;;
    :)
        printf "Option missing argument: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    *)
        printf "Invalid option: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    esac
done && shift $((OPTIND - 1))

device=${1:?missing device}
keyfile=${2:?missing keyfile}

if [[ ! -b $1 ]]; then
    printf "File is not a device: %q\n" "$1" >&2
    exit 1
fi

if ! uuid=$(sudo blkid -s UUID -o value "$device") || [[ -z $uuid ]]; then
    printf "Unable to get UUID for device: %q\n" "$device" >&2
    exit 1
fi

umask 077

# If the config file doesn't exist, add a skeleton.
if [[ ! -f $config_file ]]; then
    mkdir -p "$config_dir"
    jq -n '.device_config=[]' >"$config_file"
fi

# Keep a copy of the keyfile for udiskie.
mkdir -p "$keyfile_dir"
keyfile_copy=$keyfile_dir/${keyfile_name:-$uuid}.bin
sudo cp -v "$keyfile" "$keyfile_copy"
sudo chown "$USER:$USER" "$keyfile_copy"

# Lookup the index for this uuid, if it already exists.
index=$(jq --arg uuid "$uuid" '.device_config | map(.id_uuid == $uuid) | index(true)' "$config_file")

# Pass the keyfile to jq, but with the shortened home path (for portability).
jq_options=(--arg keyfile "${keyfile_copy/$HOME/\~}")

# Depending on whether or not the uuid exists, either add or update it.
if [[ $index == null ]]; then
    jq_options+=(--arg uuid "$uuid")
    jq_filter='.device_config += [{ "id_uuid": $uuid, "keyfile": $keyfile }]'
else
    jq_options+=(--arg index "$index")
    jq_filter='.device_config[$index | tonumber].keyfile=$keyfile'
fi

jq "${jq_options[@]}" "$jq_filter" "$config_file" | sponge "$config_file"

# Restart the service to pick up the config changes.
systemctl --user restart udiskie.service
