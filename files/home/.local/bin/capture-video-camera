#!/usr/bin/env bash

set -euo pipefail

delay=0
device=/dev/video0
directory=$HOME
file_name=camera_%FT%T%:z
file_type=mp4

usage="Capture video from a camera device.

Usage:
    ${0##*/} [OPTIONS] [FILE | 'stop']
    
Options:
    -a              also capture audio from microphone

    -i DEVICE       capture input from device
                    (default: $device)

    -d NUMBER       number of seconds to wait before starting capture
                    (default: $delay)

    -D DIRECTORY    directory in which to store default output file
                    (default: $directory)

    -N FILENAME     filename to use for default output file
                    (default: $file_name)

    -E EXTENSION    extension to use for default output file
                    (default: $file_type)

    -X              stop recording video

Arguments:
    FILE            output file (used instead of default)
                    formats any sequences recognized by strftime
                    (default: $directory/$file_name.$file_type)"

capture_audio=0
capture_command_stdin=$XDG_RUNTIME_DIR/${0##*/}-command.stdin

while getopts ":ai:d:D:N:E:Xh" option; do
    case $option in
    a) capture_audio=1 ;;
    i) device=$OPTARG ;;
    d) delay=$OPTARG ;;
    D) directory=$OPTARG ;;
    N) file_name=$OPTARG ;;
    E) file_type=$OPTARG ;;
    X)
        if [[ -f $capture_command_stdin ]]; then
            printf "q\n" >>"$capture_command_stdin"
        fi
        exit 0
        ;;
    h)
        printf "%s\n" "$usage"
        exit 0
        ;;
    *)
        printf "Invalid option: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    esac
done && shift $((OPTIND - 1))

# Substitute any date format placeholders in output filename.
output_file=$(date +"${1:-$directory/$file_name.$file_type}")

capture_command=(ffmpeg -hide_banner -y -f v4l2 -i "$device")

if ((capture_audio)); then
    capture_command+=(-f alsa -i default)
fi

if [[ -v duration ]]; then
    capture_command+=(-t "$duration")
fi

# If a delay was requested, provide an audible countdown to let user know
# something is about to happen.
if ((delay > 0)); then
    canberra-gtk-play -l "$delay" -i message
fi

mkdir -p "$(dirname "$output_file")"
capture_command+=("$output_file")

# Normally, the capture command can be stopped by pressing 'q'. If not
# associated with a terminal, there will be no way to directly tell the capture
# command to stop. Therefore, allow its stdin to be written to externally, so
# we can send the 'q' from elsewhere.
if ! tty --silent; then
    touch "$capture_command_stdin"
    printf -v cleanup "rm %q" "$capture_command_stdin"
    trap '$cleanup' EXIT
    "${capture_command[@]}" <"$capture_command_stdin"
else
    printf "Press 'q' at any time to stop recording...\n"
    "${capture_command[@]}"
fi

# If the capture file is a gif, optimize it.
if [[ $output_file == *.gif ]] && command -v gifsicle >/dev/null; then
    gifsicle --batch --optimize=3 "$output_file"
fi

# Provide audible feedback that capture is complete.
canberra-gtk-play -i screen-capture &

wl-copy -n "$output_file"
