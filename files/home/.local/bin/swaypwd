#!/usr/bin/env bash

set -euo pipefail

usage="Print the working directory of a window.

Usage:
    ${0##*/} [OPTIONS] [ID]

Options:
    -h    show this help text and exit

Arguments:
    ID    print directory for window ID
          (default: focused window)"

while getopts ":h" option; do
    case $option in
    h)
        printf "%s\n" "$usage"
        exit 0
        ;;
    *)
        printf "Invalid option: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    esac
done && shift $((OPTIND - 1))

jq_options=()

if [[ -v 1 ]]; then
    # A window ID was given, so look at windows in every workspace.
    jq_filter='.. | select(.pid? and .id? and .id == $id) | .pid'
    jq_options+=(--argjson id "$1")
else
    # No window ID was given, so allow the user to select visible windows.
    jq_filter='.. | select(.pid? and .visible? and .focused?) | .pid'
fi

window_pid=$(swaymsg -t get_tree | jq -r "${jq_options[@]}" "$jq_filter")

# Fallback value, in case no window information or working directory is found.
cwd=$HOME

if [[ -n $window_pid ]]; then
    # Start the child pid search with the current or given window.
    pid=$window_pid

    # What is the direct descendent of the current pid?
    while next_pid=$(pgrep --parent "$pid" | head -n1); do
        # Some child processes don't inherit the working directory of the
        # parent process. If they are encountered, stop looking for children
        # and use whatever pid was found last.
        case $(readlink /proc/"$next_pid"/exe) in
        */wl-copy) break ;;
        esac

        pid=$next_pid
    done

    cwd_link=/proc/$pid/cwd

    # The actual working directory is pointed to by the symlink.
    if possible_cwd=$(realpath "$cwd_link" 2>/dev/null); then
        cwd=$possible_cwd
    fi
fi

printf "%s" "$cwd"
