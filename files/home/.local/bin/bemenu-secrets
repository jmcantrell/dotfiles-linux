#!/usr/bin/env bash

set -euo pipefail
shopt -s nullglob globstar

data_dir=${SECRETS_DATA_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/secrets}
secret_length=${SECRETS_GENERATE_LENGTH:-32}
clipboard_seconds=${SECRETS_CLIPBOARD_SECONDS:-45}

usage="Interact with pass using bemenu.

Usage:
    ${0##*/} [OPTIONS] ACTION [FILTER...]

Options:
    -h              show this help text and exit

    -c              copy secret to clipboard (and expire after $clipboard_seconds seconds)
    -q              generate a QR code

    -D DIRECTORY    directory in which to store snippets
                    (default: ${data_dir@Q})

Actions:
    choose          choose existing password
    generate        generate a new password"

names() {
    local dir=${store_dir%%/}

    if [[ ! -d $dir ]]; then
        return 0
    fi

    local file name
    for file in "$dir"/**/*.age; do
        [[ -f $file ]] || continue

        name=${file#"$dir"/}
        name=${name%.age}

        if (($# == 0)); then
            printf "%s\n" "$name"
        else
            for filter in "$@"; do
                if [[ /$name/ == */$filter/* ]]; then
                    printf "%s\n" "$name"
                    break
                fi
            done
        fi
    done
}

do_choose() {
    secrets get "$1"
}

do_generate() {
    local secret
    secret=$(pwgen --symbols --secure "$secret_length" 1)
    secrets set "$1" <<<"$secret"
    printf "%s" "$secret"
}

handle_clipboard() {
    local name=$1
    local secret=$2
    local id=clipboard-timeout-$WAYLAND_DISPLAY
    local selector=^$id$

    # Clear any previous clipboard timeout.
    while pgrep -f "$selector" >/dev/null; do
        pkill -f "$selector" || break
        sleep 0.1
    done

    local before
    before=$(wl-paste | base64)

    wl-copy -n <<<"$secret"

    notify-send -i edit-copy-symbolic \
        -t $((clipboard_seconds * 1000)) \
        -h string:x-canonical-private-synchronous:"${0##*/}" \
        "Copied $name to clipboard" \
        "Will clear in <b>$clipboard_seconds</b> seconds..." &

    # Start countdown to clear the secret from the clipboard.
    ( 
        # Create a tagged process to guarantee idempotency (see pkill above).
        (exec -a "$id" bash <<<"trap 'kill %1' TERM; sleep $clipboard_seconds & wait")

        # Only reset the clipboard if it hasn't been altered.
        if [[ $(wl-paste | base64) == $(base64 <<<"$secret") ]]; then
            base64 -d <<<"$before" | wl-copy -n
        fi
    ) &
    disown
}

handle_qrcode() {
    local name=$1 secret=$2
    qrencode --size=10 --output=- "$secret" |
        gm display -title "qr code" -geometry +200+200 - 2>/dev/null
}

handlers=()

while getopts ":D:qch" option; do
    case $option in
    D) data_dir=${OPTARG%%/} ;;
    q) handlers+=(qrcode) ;;
    c) handlers+=(clipboard) ;;
    h)
        printf "%s\n" "$usage"
        exit 0
        ;;
    *)
        printf "Invalid option: %s\n" "$OPTARG" >&2
        exit 1
        ;;
    esac
done && shift $((OPTIND - 1))

store_dir=$data_dir/store

action=${1:?missing action}
shift

case $action in
choose | generate) ;;
*)
    printf "Invalid action: %s\n" "$action" >&2
    exit 1
    ;;
esac

if ! name=$(names "$@" | bemenu --list 20 --bottom --prompt "$action secret" | head -n1) || [[ -z $name ]]; then
    printf "No name entered or selected\n" >&2
    exit 1
fi

secret=$(do_"$action" "$name")

printf "%s\n" "$name" "$secret"

for handler in "${handlers[@]}"; do
    handle_"$handler" "$name" "$secret"
done
